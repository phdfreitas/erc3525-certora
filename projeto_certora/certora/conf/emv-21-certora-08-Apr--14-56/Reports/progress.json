{
	RegisteredRule(rule=totalSupplyNonNegative, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=onlyAuthorizedCanTransfer, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=unauthorazedTransfer, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=slotDeveSerConsistente, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=transferValueToNewToken, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=transferValuePreservesTotal, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=mintOnTransferIncreasesSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=derivedTokenInheritsSlot, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=transferToZeroAddressFails, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=approveZeroAddressFails, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=totalSupplyNonNegative, range=ERC3525.spec:2:1, params=[], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:3:5, cvlType=env, id=e, scope=(Spec file -> Rule totalSupplyNonNegative)), Assert(range=ERC3525.spec:4:5, exp=ERC3525.totalSupply(e) >= 0, description=totalSupply(e) >= 0, scope=(Spec file -> Rule totalSupplyNonNegative), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule totalSupplyNonNegative), methodParamFilters=MethodParamFilters(range=ERC3525.spec:2:1, scope=(Spec file -> Rule totalSupplyNonNegative), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=totalSupplyNonNegative, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=approveZeroAddressFails, range=ERC3525.spec:121:1, params=[uint256 tokenId], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:122:5, cvlType=env, id=e, scope=(Spec file -> Rule approveZeroAddressFails)), address zeroAddr = 0x0, uint256 value = 100, Apply(range=ERC3525.spec:126:5, exp=ERC3525.approve(e,tokenId,zeroAddr,value) could_revert, scope=(Spec file -> Rule approveZeroAddressFails)), Assert(range=ERC3525.spec:128:5, exp=lastReverted, description="Aprovação para address(0) deve reverter", scope=(Spec file -> Rule approveZeroAddressFails), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule approveZeroAddressFails), methodParamFilters=MethodParamFilters(range=ERC3525.spec:121:1, scope=(Spec file -> Rule approveZeroAddressFails), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=approveZeroAddressFails, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=transferToZeroAddressFails, range=ERC3525.spec:110:1, params=[uint256 fromTokenId], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:111:5, cvlType=env, id=e, scope=(Spec file -> Rule transferToZeroAddressFails)), address zeroAddr = 0x0, uint256 value = ERC3525.balanceOf(e,fromTokenId), Apply(range=ERC3525.spec:115:5, exp=ERC3525.transferFrom(e,fromTokenId,zeroAddr,value) could_revert, scope=(Spec file -> Rule transferToZeroAddressFails)), Assert(range=ERC3525.spec:117:5, exp=lastReverted, description="Transferência para address(0) deve reverter", scope=(Spec file -> Rule transferToZeroAddressFails), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule transferToZeroAddressFails), methodParamFilters=MethodParamFilters(range=ERC3525.spec:110:1, scope=(Spec file -> Rule transferToZeroAddressFails), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=transferToZeroAddressFails, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=slotDeveSerConsistente, range=ERC3525.spec:48:1, params=[uint256 tokenId], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:49:5, cvlType=env, id=e, scope=(Spec file -> Rule slotDeveSerConsistente)), uint256 slotAntes = ERC3525.slotOf(e,tokenId), uint256 slotDepois = ERC3525.slotOf(e,tokenId), Assert(range=ERC3525.spec:54:5, exp=slotAntes == slotDepois, description=slotAntes == slotDepois, scope=(Spec file -> Rule slotDeveSerConsistente), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule slotDeveSerConsistente), methodParamFilters=MethodParamFilters(range=ERC3525.spec:48:1, scope=(Spec file -> Rule slotDeveSerConsistente), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=slotDeveSerConsistente, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=mintOnTransferIncreasesSupply, range=ERC3525.spec:94:1, params=[uint256 fromId, address to, uint256 value], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:95:5, cvlType=env, id=e, scope=(Spec file -> Rule mintOnTransferIncreasesSupply)), uint256 supplyBefore = ERC3525.totalSupply(e), Apply(range=ERC3525.spec:97:5, exp=ERC3525.transferFrom(e,fromId,to,value), scope=(Spec file -> Rule mintOnTransferIncreasesSupply)), Assert(range=ERC3525.spec:98:5, exp=ERC3525.totalSupply(e) == supplyBefore + 1, description=totalSupply(e) == supplyBefore + 1, scope=(Spec file -> Rule mintOnTransferIncreasesSupply), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule mintOnTransferIncreasesSupply), methodParamFilters=MethodParamFilters(range=ERC3525.spec:94:1, scope=(Spec file -> Rule mintOnTransferIncreasesSupply), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=mintOnTransferIncreasesSupply, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=derivedTokenInheritsSlot, range=ERC3525.spec:102:1, params=[uint256 fromId, address to, uint256 value], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:103:5, cvlType=env, id=e, scope=(Spec file -> Rule derivedTokenInheritsSlot)), uint256 originalSlot = ERC3525.slotOf(e,fromId), uint256 newId = ERC3525.transferFrom(e,fromId,to,value), Assert(range=ERC3525.spec:106:5, exp=ERC3525.slotOf(e,newId) == originalSlot, description=slotOf(e, newId) == originalSlot, scope=(Spec file -> Rule derivedTokenInheritsSlot), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule derivedTokenInheritsSlot), methodParamFilters=MethodParamFilters(range=ERC3525.spec:102:1, scope=(Spec file -> Rule derivedTokenInheritsSlot), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=derivedTokenInheritsSlot, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=transferValuePreservesTotal, range=ERC3525.spec:82:1, params=[uint256 fromId, uint256 toId, uint256 value], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:83:5, cvlType=env, id=e, scope=(Spec file -> Rule transferValuePreservesTotal)), Assume(range=ERC3525.spec:84:5, exp=ERC3525.slotOf(e,fromId) == ERC3525.slotOf(e,toId), scope=(Spec file -> Rule transferValuePreservesTotal), invariantPreCond=false), Assume(range=ERC3525.spec:85:5, exp=ERC3525.balanceOf(e,fromId) >= value, scope=(Spec file -> Rule transferValuePreservesTotal), invariantPreCond=false), mathint totalBefore = ERC3525.balanceOf(e,fromId) + ERC3525.balanceOf(e,toId), Apply(range=ERC3525.spec:89:5, exp=ERC3525.transferFrom(e,fromId,toId,value), scope=(Spec file -> Rule transferValuePreservesTotal)), Assert(range=ERC3525.spec:90:5, exp=ERC3525.balanceOf(e,fromId) + ERC3525.balanceOf(e,toId) == totalBefore, description=balanceOf(e, fromId) + balanceOf(e, toId) == totalBefore, scope=(Spec file -> Rule transferValuePreservesTotal), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule transferValuePreservesTotal), methodParamFilters=MethodParamFilters(range=ERC3525.spec:82:1, scope=(Spec file -> Rule transferValuePreservesTotal), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=transferValuePreservesTotal, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=unauthorazedTransfer, range=ERC3525.spec:28:1, params=[address from, address to, uint256 tokenId], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:29:5, cvlType=env, id=e, scope=(Spec file -> Rule unauthorazedTransfer)), Assume(range=ERC3525.spec:32:5, exp=ERC3525.ownerOf(e,tokenId) != e.msg.sender, scope=(Spec file -> Rule unauthorazedTransfer), invariantPreCond=false), Assume(range=ERC3525.spec:33:5, exp=ERC3525.getApproved(e,tokenId) != e.msg.sender, scope=(Spec file -> Rule unauthorazedTransfer), invariantPreCond=false), Assume(range=ERC3525.spec:34:5, exp=!(ERC3525.isApprovedForAll(e,ERC3525.ownerOf(e,tokenId),e.msg.sender)), scope=(Spec file -> Rule unauthorazedTransfer), invariantPreCond=false), uint256 balanceBefore = ERC3525.balanceOf(e,tokenId), address ownerBefore = ERC3525.ownerOf(e,tokenId), Apply(range=ERC3525.spec:39:5, exp=ERC3525.transferFrom(e,from,to,tokenId), scope=(Spec file -> Rule unauthorazedTransfer)), Assert(range=ERC3525.spec:42:5, exp=ERC3525.balanceOf(e,tokenId) == balanceBefore, description=balanceOf(e, tokenId) == balanceBefore, scope=(Spec file -> Rule unauthorazedTransfer), invariantPostCond=false), Assert(range=ERC3525.spec:43:5, exp=ERC3525.ownerOf(e,tokenId) == ownerBefore, description=ownerOf(e, tokenId) == ownerBefore, scope=(Spec file -> Rule unauthorazedTransfer), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule unauthorazedTransfer), methodParamFilters=MethodParamFilters(range=ERC3525.spec:28:1, scope=(Spec file -> Rule unauthorazedTransfer), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=unauthorazedTransfer, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=transferValueToNewToken, range=ERC3525.spec:58:1, params=[uint256 fromTokenId, address recipient, uint256 value], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:59:5, cvlType=env, id=e, scope=(Spec file -> Rule transferValueToNewToken)), Assume(range=ERC3525.spec:62:5, exp=ERC3525.ownerOf(e,fromTokenId) == e.msg.sender, scope=(Spec file -> Rule transferValueToNewToken), invariantPreCond=false), Assume(range=ERC3525.spec:63:5, exp=ERC3525.balanceOf(e,fromTokenId) >= value, scope=(Spec file -> Rule transferValueToNewToken), invariantPreCond=false), uint256 balBefore = ERC3525.balanceOf(e,fromTokenId), uint256 slotBefore = ERC3525.slotOf(e,fromTokenId), uint256 supplyBefore = ERC3525.totalSupply(e), uint256 newId = ERC3525.transferFrom(e,fromTokenId,recipient,value), Assert(range=ERC3525.spec:74:5, exp=ERC3525.balanceOf(e,fromTokenId) == balBefore - value, description=balanceOf(e, fromTokenId) == balBefore - value, scope=(Spec file -> Rule transferValueToNewToken), invariantPostCond=false), Assert(range=ERC3525.spec:75:5, exp=ERC3525.ownerOf(e,newId) == recipient, description=ownerOf(e, newId) == recipient, scope=(Spec file -> Rule transferValueToNewToken), invariantPostCond=false), Assert(range=ERC3525.spec:76:5, exp=ERC3525.balanceOf(e,newId) == value, description=balanceOf(e, newId) == value, scope=(Spec file -> Rule transferValueToNewToken), invariantPostCond=false), Assert(range=ERC3525.spec:77:5, exp=ERC3525.slotOf(e,newId) == slotBefore, description=slotOf(e, newId) == slotBefore, scope=(Spec file -> Rule transferValueToNewToken), invariantPostCond=false), Assert(range=ERC3525.spec:78:5, exp=ERC3525.totalSupply(e) == supplyBefore + 1, description=totalSupply(e) == supplyBefore + 1, scope=(Spec file -> Rule transferValueToNewToken), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule transferValueToNewToken), methodParamFilters=MethodParamFilters(range=ERC3525.spec:58:1, scope=(Spec file -> Rule transferValueToNewToken), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=transferValueToNewToken, isCounted=true): true
}