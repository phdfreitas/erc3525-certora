{
	RegisteredRule(rule=totalSupplyNonNegative, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=onlyAuthorizedCanTransfer, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=unauthorazedTransfer, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=slotDeveSerConsistente, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=transferValueToNewToken, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=totalSupplyNonNegative, range=ERC3525.spec:2:1, params=[], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:3:5, cvlType=env, id=e, scope=(Spec file -> Rule totalSupplyNonNegative)), Assert(range=ERC3525.spec:4:5, exp=ERC3525.totalSupply(e) >= 0, description=totalSupply(e) >= 0, scope=(Spec file -> Rule totalSupplyNonNegative), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule totalSupplyNonNegative), methodParamFilters=MethodParamFilters(range=ERC3525.spec:2:1, scope=(Spec file -> Rule totalSupplyNonNegative), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=totalSupplyNonNegative, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=slotDeveSerConsistente, range=ERC3525.spec:45:1, params=[uint256 tokenId], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:46:5, cvlType=env, id=e, scope=(Spec file -> Rule slotDeveSerConsistente)), uint256 slotAntes = ERC3525.slotOf(e,tokenId), uint256 slotDepois = ERC3525.slotOf(e,tokenId), Assert(range=ERC3525.spec:51:5, exp=slotAntes == slotDepois, description=slotAntes == slotDepois, scope=(Spec file -> Rule slotDeveSerConsistente), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule slotDeveSerConsistente), methodParamFilters=MethodParamFilters(range=ERC3525.spec:45:1, scope=(Spec file -> Rule slotDeveSerConsistente), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=slotDeveSerConsistente, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=unauthorazedTransfer, range=ERC3525.spec:28:1, params=[address from, address to, uint256 tokenId], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:29:5, cvlType=env, id=e, scope=(Spec file -> Rule unauthorazedTransfer)), Assume(range=ERC3525.spec:32:5, exp=ERC3525.ownerOf(e,tokenId) != e.msg.sender, scope=(Spec file -> Rule unauthorazedTransfer), invariantPreCond=false), Assume(range=ERC3525.spec:33:5, exp=ERC3525.getApproved(e,tokenId) != e.msg.sender, scope=(Spec file -> Rule unauthorazedTransfer), invariantPreCond=false), Assume(range=ERC3525.spec:34:5, exp=!(ERC3525.isApprovedForAll(e,ERC3525.ownerOf(e,tokenId),e.msg.sender)), scope=(Spec file -> Rule unauthorazedTransfer), invariantPreCond=false), address oldOwner = ERC3525.ownerOf(e,tokenId), Apply(range=ERC3525.spec:37:5, exp=ERC3525.transferFrom(e,from,to,tokenId), scope=(Spec file -> Rule unauthorazedTransfer)), address newOwner = ERC3525.ownerOf(e,tokenId), Assert(range=ERC3525.spec:40:5, exp=oldOwner == newOwner, description=oldOwner == newOwner, scope=(Spec file -> Rule unauthorazedTransfer), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule unauthorazedTransfer), methodParamFilters=MethodParamFilters(range=ERC3525.spec:28:1, scope=(Spec file -> Rule unauthorazedTransfer), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=unauthorazedTransfer, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=transferValueToNewToken, range=ERC3525.spec:55:1, params=[uint256 fromTokenId, address recipient, uint256 value], description=, goodDescription=, block=[Declaration(range=ERC3525.spec:56:5, cvlType=env, id=e, scope=(Spec file -> Rule transferValueToNewToken)), Assume(range=ERC3525.spec:59:5, exp=ERC3525.ownerOf(e,fromTokenId) == e.msg.sender, scope=(Spec file -> Rule transferValueToNewToken), invariantPreCond=false), Assume(range=ERC3525.spec:60:5, exp=ERC3525.balanceOf(e,fromTokenId) >= value, scope=(Spec file -> Rule transferValueToNewToken), invariantPreCond=false), uint256 balBefore = ERC3525.balanceOf(e,fromTokenId), uint256 slotBefore = ERC3525.slotOf(e,fromTokenId), uint256 supplyBefore = ERC3525.totalSupply(e), uint256 newId = ERC3525.transferFrom(e,fromTokenId,recipient,value), Assert(range=ERC3525.spec:71:5, exp=ERC3525.balanceOf(e,fromTokenId) == balBefore - value, description=balanceOf(e, fromTokenId) == balBefore - value, scope=(Spec file -> Rule transferValueToNewToken), invariantPostCond=false), Assert(range=ERC3525.spec:72:5, exp=ERC3525.ownerOf(e,newId) == recipient, description=ownerOf(e, newId) == recipient, scope=(Spec file -> Rule transferValueToNewToken), invariantPostCond=false), Assert(range=ERC3525.spec:73:5, exp=ERC3525.balanceOf(e,newId) == value, description=balanceOf(e, newId) == value, scope=(Spec file -> Rule transferValueToNewToken), invariantPostCond=false), Assert(range=ERC3525.spec:74:5, exp=ERC3525.slotOf(e,newId) == slotBefore, description=slotOf(e, newId) == slotBefore, scope=(Spec file -> Rule transferValueToNewToken), invariantPostCond=false), Assert(range=ERC3525.spec:75:5, exp=ERC3525.totalSupply(e) == supplyBefore + 1, description=totalSupply(e) == supplyBefore + 1, scope=(Spec file -> Rule transferValueToNewToken), invariantPostCond=false)], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule transferValueToNewToken), methodParamFilters=MethodParamFilters(range=ERC3525.spec:55:1, scope=(Spec file -> Rule transferValueToNewToken), methodParamToFilter={}), ruleGenerationMeta=WithSanity(sanity=PRE_SANITY_CHECK), isSatisfyRule=false)), parentCVLDeclarationId=transferValueToNewToken, isCounted=true): true
}